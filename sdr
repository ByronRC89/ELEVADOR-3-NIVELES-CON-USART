// ELEVADOR 3 NIVELES // BYRON R.

#include <stdint.h>
#include "stm32l053xx.h"    // LIBRERIA UNIFICADA.

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


//--------------------------------------------------------------------------------------------//
void keyboard_config();
void print_bcd_7_segment_decoder_CC(uint8_t);
void delayMs(int n);
void key_pressed();
void init();
uint8_t piso_actual = 0;
uint8_t escrito =0;
uint8_t val = 0;

/*------------------------------------------------ FUNCIONES--------------------------*/
//void delay_ms (uint16_t n);
void USART2_write(uint8_t ch);
void USART2_putstring(uint8_t* StringPtr);
void USART2_putstring_E(uint8_t* StringPtr);
uint8_t USART2_read(void);
/*-------------------------------------------------------------------------------------------- */


int main(void){
 RCC->IOPENR |= 1<<0;
		                                                  // Test GPIOA PA5
 GPIOA->MODER &= ~(1<<11);
		                                                  // USART 2 Pint Configuracion
					                                      // Alternate Function MODE for PA2 and PA3

 GPIOA->MODER &= ~(1<<4);      // PA2 como ALternate FUnction, MODER [10]
 GPIOA->MODER &= ~(1<<6);      // PA3 como Alternate FUnction, MODER [10]
				 	// Select witch MODER, Alternate FUnction 4 para USART2, TX en PA2 :: RX en PA3
 GPIOA->AFR[0] |= 1<<10;             // PA2 mapped as AF4
 GPIOA->AFR[0] |= 1<<14;             // PA3 mapped as AF4

				                               	          // USART2 peripheral configuration
				                 	                      // USART2 clock enable on RCC APB1ENR register

 RCC->APB1ENR |= 1<<17;           // Baud Rate calculation
 USART2->BRR   = 218;                 // Enable TX and RX para 16mhz a 9600 baudios
 USART2->CR1  |= (1<<2)|(1<<3); // Enable peripheral
 USART2->CR1  |= 1<<0;

	init();


	while(1){
		keyboard_config();		//SE MANDA A LLAMAR LA FUNCION QUE TIENE LA CONFIGURACION DE LAS FILAS
     	key_pressed();			//SE MANDA A LLAMAR LA FUNCION QUE TIENE LA CONFIGURACION DEL MULTIPLEXADO DE COLUMNAS E IMPRESION EN LOS DISPLAYS
	}
}


void init(){

	RCC->IOPENR |=0x01<<0;		//HABILITA EL REGISTRO DE RELOJ DEL PUERTO GPIOA
	RCC->IOPENR |=0x01<<1;		//HABILITA EL REGISTRO DE RELOJ DEL PUERTO GPIOB
	RCC->IOPENR |=0x01<<2;		//HABILITA EL REGISTRO DE RELOJ DEL PUERTO GPIOC



	GPIOB->MODER &=~(1<<17);	//PB8 COMO SALIDA CON EL SEGMENTO A
	GPIOB->MODER &=~(1<<5);		//PB2 COMO SALIDA CON EL SEGMENTO B
	GPIOB->MODER &=~(1<<7);		//PB3 COMO SALIDA CON EL SEGMENTO C
	GPIOB->MODER &=~(1<<9);		//PB4 COMO SALIDA CON EL SEGMENTO D
	GPIOB->MODER &=~(1<<13);	//PB6 COMO SALIDA CON EL SEGMENTO E
	GPIOB->MODER &=~(1<<15);	//PB7 COMO SALIDA CON EL SEGMENTO F
	GPIOB->MODER &=~(1<<19);	//PB9 COMO SALIDA CON EL SEGMENTO H
	GPIOA->MODER &=~(1<<1);		//PA0 COMO HABILITADOR DEL COMUN DEL DISPLAY 0
	GPIOA->MODER &=~(1<<3);		//PA1 COMO HABILITADOR DEL COMUN DEL DISPLAY 1
                                      // RESET DEL PUETO B
	GPIOA->BSRR = (0x03<<16);	//INICIA COLOCANDO 0 LOS PUERTOS PA0 Y PA1
/*--------------------------------------------------------------------------------------------------------------------------*/

}
void keyboard_config(){

	//CONFIGURACION DE LAS FILAS
	//CPNFIGURACION DE PC5
	GPIOC->MODER &=~(1<<10);	//SE HABILITA COMO ENTRADA
	GPIOC->MODER &=~(1<<11);
	GPIOC->PUPDR |=(1<<10);		    //SE HABILITA EL PULL-UP DE PC5
	//CONFIGURACION DE PC6
	GPIOC->MODER &=~(1<<12);	//SE HABILITA COMO ENTRADA
	GPIOC->MODER &=~(1<<13);
	GPIOC->PUPDR |=(1<<12);		    //SE HABILITA EL PULL-UP DE PC6
	//CONFIGURACION DE PC8
	GPIOC->MODER &=~(1<<16);	//SE HABILITA COMO ENTRADA
	GPIOC->MODER &=~(1<<17);
	GPIOC->PUPDR |=(1<<16);		     //SE HABILITA EL PULL-UP DE PC8
	//CONFIGURACION DE PC9
	GPIOC->MODER &=~(1<<18);	//SE HABILITA COMO ENTRADA
	GPIOC->MODER &=~(1<<19);
	GPIOC->PUPDR |=(1<<18);		    //SE HABILITA EL PULL-UP DE PC9
/*---------------------------------------------------------------------------------------------------------------------------*/
                                  // CONFIGURACION DE PUERTOS SENSORES INFRAROJOS

	                                                       //CPNFIGURACION DE PC1
	GPIOC->MODER &=~(1<<2);	   //SE HABILITA COMO ENTRADA
	GPIOC->MODER &=~(1<<3);
	GPIOC->PUPDR |=(1<<2);
		                                                    //CONFIGURACION DE PC2
	GPIOC->MODER &=~(1<<4);	    //SE HABILITA COMO ENTRADA
	GPIOC->MODER &=~(1<<5);
	GPIOC->PUPDR |=(1<<4);
			                                               //CONFIGURACION DE PC3
	GPIOC->MODER &=~(1<<6);	   //SE HABILITA COMO ENTRADA
	GPIOC->MODER &=~(1<<7);
	GPIOC->PUPDR |=(1<<6);
/*---------------------------------------------------------------------------------------------------------------------------*/


	//COLUMN CONFIG
	//PB11 COL0 OUTPUT-HIGH
	GPIOB->MODER &=~(1<<23);	//SE HABILITA COMO ENTRADA
	//PC7 COL1 OUTPUT-HIGH
	GPIOC->MODER &=~(1<<15);	//SE HABILITA COMO ENTRADA
	//PA9 COL2 OUTPUT-HIGH
	GPIOA->MODER &=~(1<<19);  	//SE HABILITA COMO ENTRADA
	//PC4 COL3 OUTPUT-HIGH
	GPIOC->MODER &=~(1<<9);		//SE HABILITA COMO ENTRADA

	// SALIDAS MOTOR
	GPIOC->MODER &=~(1<<21);  // PC10 SUBE
	GPIOC->MODER &=~(1<<23);  // PC11 BAJA
/*---------------------------------------------------------------------------------------------------------------------------*/
}

void key_pressed(){
                                                                                     //paro en llamada de piso 3 al piso 1
if(!(GPIOC->IDR & 0x02 ) && (piso_actual== 1) ){

GPIOC->ODR &=~(1<<11);
}
	                                                                                 // paro en llamanda de piso 1 al 2
                                                                      	             // paro en llamanda de piso 3 al 2
if(!(GPIOC->IDR & 0x04) && (piso_actual== 2)){

GPIOC->ODR &=~(1<<11);                                       // apaga motor bajando
GPIOC->ODR &=~(1<<10);                                       // apaga motor subiendo
	}

                                                                                     // paro en llamada de piso 1 al 3
if(!(GPIOC->IDR & 0x08) && (piso_actual == 3)){
GPIOC->ODR &=~(1<<10);
}


	                                             //SCAN COL0
GPIOB->ODR &=~(1<<11);   //COLOCA PB11 COMO 0
GPIOC->ODR |=(1<<7);	     //COLOCA PC7 COMO 1
GPIOA->ODR |=(1<<9);	     //COLOCA PA9 COMO 1
GPIOC->ODR |=(1<<4);	     //COLOCA PC4 COMO 1
delayMs(5);
if(!(GPIOC->IDR & 0x20)){			                      //EVALUANDO FILA 0
		                                                                      //SE PRESIONO LA TECLA 1


if( piso_actual== 2){                                             //llama el elvador de piso 2 al piso 1

print_bcd_7_segment_decoder_CC(0x02);	    //IMPRIME EL NO. 1
GPIOA->ODR |=(1<<1);			                     		//HABILITA EL DISPLAY 0

GPIOC->ODR |=(1<<11);                                      // motor baja
USART2_putstring_E("llego al piso 1");            //encabezado de la operacion en la consola


		}
if( piso_actual== 3){                                             // llama el elvador de piso 3 al piso 1

print_bcd_7_segment_decoder_CC(0x03);	    //IMPRIME EL NO. 1
GPIOA->ODR |=(1<<1);			                    		//HABILITA EL DISPLAY 0

GPIOC->ODR |=(1<<11);                                      // motor baja
USART2_putstring_E("llego al piso 1");


				}
print_bcd_7_segment_decoder_CC(0x01);	   //IMPRIME EL NO. 1
GPIOA->ODR |=(1<<1);				                	    //HABILITA EL DISPLAY 0



}else if(!(GPIOC->IDR & 0x40)){		                     //EVALUANDO FILA 1
		                                                                         //SE PRESIONO LA TECLA 4 // llama a piso 2
                                                                                 //SE PRESIONO LA TECLA 1
if( piso_actual== 1){                                              //llama el elvador de piso 1 al piso 2

print_bcd_7_segment_decoder_CC(0x01);	     //IMPRIME EL NO. 1 piso actual
GPIOA->ODR |=(1<<1);					                     //HABILITA EL DISPLAY 0

GPIOC->ODR |=(1<<10);                                      // motor sube
USART2_putstring_E("llego al piso 2");            //encabezado de la operacion en la consola

}
if( piso_actual== 3){                                              //llama el elvador de piso 3 al piso 2

print_bcd_7_segment_decoder_CC(0x03);	    //IMPRIME EL NO. 3 piso actual
GPIOA->ODR |=(1<<1);					                     //HABILITA EL DISPLAY 0

GPIOC->ODR |=(1<<11);                                      // motor baja
USART2_putstring_E("llego al piso 2");            // encabezado de la operacion en la consola


}

	print_bcd_7_segment_decoder_CC(0x02);	//IMPRIME EL NO. 2 piso en donde bajo o subio
	GPIOA->ODR |=(1<<1);					                //HABILITA EL DISPLAY 0

	}else if(!(GPIOC->IDR & 0x100)){	                //EVALUANDO FILA 2
		                                                                        //SE PRESIONO LA TECLA 7

	                                                                            //SE PRESIONO LA TECLA 1
	if( piso_actual== 2){                                         // llama el elvador de piso 2 al piso 3

	print_bcd_7_segment_decoder_CC(0x02);	//IMPRIME EL NO. 2 piso actual
	GPIOA->ODR |=(1<<1);					                //HABILITA EL DISPLAY 0

	GPIOC->ODR |=(1<<10);                                // motor sube 1 nivel
	 USART2_putstring_E("llego al piso 3");     // encabezado de la operacion en la consola


	}
	if( piso_actual== 1){                                         // llama el elvador de piso 1  al piso 3

	print_bcd_7_segment_decoder_CC(0x01);	//IMPRIME EL NO. 3 piso actual
	GPIOA->ODR |=(1<<1);					                //HABILITA EL DISPLAY 0

	GPIOC->ODR |=(1<<10);                                 // motor sube 2 niveles
	 USART2_putstring_E("llego al piso 3");      // encabezado de la operacion en la consola

}
		print_bcd_7_segment_decoder_CC(0x03);
		GPIOA->ODR |=(1<<1);
	}else if(!(GPIOC->IDR & 0x200)){	               //EVALUANDO FILA 3
	                                                                     	   //SE PRESIONO LA TECLA *
	}

	                                                                           //SCAN COL1
	GPIOB->ODR |=(1<<11);	                               //COLOCA PB11 COMO 1
	GPIOC->ODR &=~(1<<7);	                           //COLOCA PC7   COMO 0
	GPIOA->ODR |=(1<<9);	                               //COLOCA PA9    COMO 1
	GPIOC->ODR |=(1<<4);	                               //COLOCA PC4   COMO 1
	delayMs(5);
	if(!(GPIOC->IDR & 0x20)){			                   //EVALUANDO FILA 0
                                                                               //SE PRESIONO TECLA 2
		print_bcd_7_segment_decoder_CC(0x02);
		GPIOA->ODR |=(1<<1);
		delayMs(5);
				}

	                                                                            //SCAN COL2
	GPIOB->ODR |=(1<<11);	                                //COLOCA PB11  COMO 1
	GPIOC->ODR |=(1<<7);	                                //COLOCA PC7    COMO 1
	GPIOA->ODR &=~(1<<9); 	                            //COLOCA PA9     COMO 0
	GPIOC->ODR |=(1<<4);	                                //COLOCA PC4     COMO 1
	delayMs(5);

	if(!(GPIOC->IDR & 0x20)){			                    //EVALUANDO FILA 0
	                                                                        	//SE PRESIONO LA TECLA 3
		print_bcd_7_segment_decoder_CC(0x03);
		GPIOA->ODR |=(1<<1);
		delayMs(5);

	}
	                                                                            //SCAN COL3
	GPIOB->ODR |=(1<<11);                              	//COLOCA PB11  COMO 1
	GPIOC->ODR |=(1<<7);	                                //COLOCA PC7    COMO 1
	GPIOA->ODR |=(1<<9);	                                //COLOCA PA9     COMO 1
	GPIOC->ODR &=~(1<<4);	                            //COLOCA PC4    COMO 0
	delayMs(5);
	if(!(GPIOC->IDR & 0x20)){			                    //EVALUANDO FILA 0
		                                                                        //SE PRESIONO LA TECLA A

		delayMs(5);


    }
}

void print_bcd_7_segment_decoder_CC(uint8_t val){

	 piso_actual = val;

	if(val==0x00){						//ENCIENDE EL NUMERO 0 EN EL DISPLAY
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<8;	//SEGMENTO A
		GPIOB->ODR |=0x01<<2;	//SEGMENTO B
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
		GPIOB->ODR |=0x01<<4;	//SEGMENTO D
		GPIOB->ODR |=0x01<<6;	//SEGMENTO E
		GPIOB->ODR |=0x01<<7;	//SEGMENTO F
	}else if(val==0x01){				//ENCIENDE EL NUMERO 1 EN EL DISPLAY
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<2;	//SEGMENTO B
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
		escrito = 0x31;
	}else if(val==0x02){				//ENCIENDE EL NUMERO 2 EN EL DISPLAY
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<8;	//SEGMENTO A
		GPIOB->ODR |=0x01<<2;	//SEGMENTO B
		GPIOB->ODR |=0x01<<9;	//SEGMENTO G
		GPIOB->ODR |=0x01<<6;	//SEGMENTO E
		GPIOB->ODR |=0x01<<4;	//SEGMENTO D
		escrito = 0x32;
	}else if(val==0x03){				//ENCIENDE EL NUMERO 3 EN EL DISPLAY
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<8;	//SEGMENTO A
		GPIOB->ODR |=0x01<<2;	//SEGMENTO B
		GPIOB->ODR |=0x01<<9;	//SEGMENTO G
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
		GPIOB->ODR |=0x01<<4;	//SEGMENTO D
		escrito = 0x33;
	}else if(val==0x04){				//ENCIENDE EL NUMERO 4 EN EL DISPLAY
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<7;	//SEGMENTO F
		GPIOB->ODR |=0x01<<9;	//SEGMENTO G
		GPIOB->ODR |=0x01<<2;	//SEGMENTO B
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
	}else if(val==0x05){				//ENCIENDE EL NUEMRO 5 EN EL DISPLAY
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<8;	//SEGMENTO A
		GPIOB->ODR |=0x01<<7;	//SEGMENTO F
		GPIOB->ODR |=0x01<<9;	//SEGMENTO G
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
		GPIOB->ODR |=0x01<<4;	//SEGMENTO D
	}else if(val==0x06){				//ENCIENDE EL NUEMRO 6 EN EL DISPLAY
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<7;	//SEGMENTO F
		GPIOB->ODR |=0x01<<6;	//SEGMENTO E
		GPIOB->ODR |=0x01<<4;	//SEGMENTO D
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
		GPIOB->ODR |=0x01<<9;	//SEGMENTO G
	}else if(val==0x07){				//ENCIENDE EL NUEMRO 7 EN EL DISPLAY
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<8;	//SEGMENTO A
		GPIOB->ODR |=0x01<<2;	//SEGMENTO B
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
	}else if(val==0x08){				//ENCIENDE EL NUEMRO 8 EN EL DISPLAY
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<8;	//SEGMENTO A
		GPIOB->ODR |=0x01<<2;	//SEGMENTO B
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
		GPIOB->ODR |=0x01<<4;	//SEGMENTO D
		GPIOB->ODR |=0x01<<6;	//SEGMENTO E
		GPIOB->ODR |=0x01<<7;	//SEGMENTO F
		GPIOB->ODR |=0x01<<9;	//SEGMENTO G
	}else if(val==0x09){				//ENCIENDE EL NUMERO 9 EN EL DISPLAY
		GPIOB->BSRR=(0x3DC<<16);	//RESETA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<9;	//SEGMENTO G
		GPIOB->ODR |=0x01<<7;	//SEGMENTO F
		GPIOB->ODR |=0x01<<8;	//SEGMENTO A
		GPIOB->ODR |=0x01<<2;	//SEGMENTO B
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
	}else if(val==0x0A){				//ENCIENDE LA LETRA A
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<8;	//SEGMENTO A
		GPIOB->ODR |=0x01<<2;	//SEGMENTO B
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
		GPIOB->ODR |=0x01<<6;	//SEGMENTO E
		GPIOB->ODR |=0x01<<7;	//SEGMENTO F
		GPIOB->ODR |=0x01<<9;	//SEGMENTO G
	}else if(val==0x0B){				//ENCIENDE LA LETRA b
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
		GPIOB->ODR |=0x01<<4;	//SEGMENTO D
		GPIOB->ODR |=0x01<<6;	//SEGMENTO E
		GPIOB->ODR |=0x01<<7;	//SEGMENTO F
		GPIOB->ODR |=0x01<<9;	//SEGMENTO G
	}else if(val==0x0C){				//ENCIENDE LA LETRA C
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<8;	//SEGMENTO A
		GPIOB->ODR |=0x01<<4;	//SEGMENTO D
		GPIOB->ODR |=0x01<<6;	//SEGMENTO E
		GPIOB->ODR |=0x01<<7;	//SEGMENTO F
	}else if(val==0x0D){				//ENCIENDE LA LETRA d
		GPIOB->BSRR=(0x3DC<<16);	//RESETEA TODOS LOS BITS A 0
		GPIOB->ODR |=0x01<<2;	//SEGMENTO B
		GPIOB->ODR |=0x01<<3;	//SEGMENTO C
		GPIOB->ODR |=0x01<<4;	//SEGMENTO D
		GPIOB->ODR |=0x01<<6;	//SEGMENTO E
		GPIOB->ODR |=0x01<<9;	//SEGMENTO G
	}

}

void delayMs(int n){		//DELAY EXPERIMENTAL
	int i;
	for(; n > 0; n--)
		for(i = 0; i < 230; i++);
}



uint8_t USART2_read(void)
{
	while(!(USART2->ISR & 0x0020)){}
	return USART2->RDR ;

}




void USART2_write(uint8_t ch)
{
	while (!(USART2->ISR & 0x0080)){}
	USART2->TDR = ch;
}



void USART2_putstring(uint8_t* StringPtr)
{
	while(*StringPtr != 0x00)
	{
		USART2_write(*StringPtr);
		StringPtr++;
	}
}


void USART2_putstring_E(uint8_t* StringPtr)
{
	while(*StringPtr != 0x00)
	{
		USART2_write(*StringPtr);
		StringPtr++;
	}
	USART2_write(0x0D); // CR
	USART2_write(0x0A); // NL
}


